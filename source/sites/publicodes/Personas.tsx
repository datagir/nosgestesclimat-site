import { resetSimulation } from '@/actions/actions'
import Title from '@/components/groupe/Title'
import { useEffect, useState } from 'react'
import emoji from 'react-easy-emoji'
import { Trans, useTranslation } from 'react-i18next'
import { useDispatch, useSelector } from 'react-redux'
import { Link, useNavigate, useSearchParams } from 'react-router-dom'
import { setDifferentSituation } from '../../actions/actions'
import IllustratedMessage from '../../components/ui/IllustratedMessage'
import useBranchData from '../../components/useBranchData'
import { useEngine } from '../../components/utils/EngineContext'
import { ScrollToTop } from '../../components/utils/Scroll'
import { situationSelector } from '../../selectors/simulationSelectors'
import GridChart from './chart/GridChart'
import RavijenChart from './chart/RavijenChart'
import ActionSlide from './fin/ActionSlide'
import Budget from './fin/Budget'
import FinShareButton from './fin/FinShareButton'
import { CardGrid } from './ListeActionPlus'

const Nothing = () => null
const visualisationChoices = {
	ravijen: RavijenChart,
	budget: Budget,
	'sous-cat√©gories': GridChart,
	emojis: () => <FinShareButton showResult />,

	action: ActionSlide,

	aucun: Nothing,
}

export default ({}) => {
	const persona = useSelector((state) => state.simulation?.persona)
	const [searchParams, setSearchParams] = useSearchParams({
		visualisation: 'aucun',
	})

	const visualisationParam = searchParams.get('visualisation')
	const Visualisation = visualisationChoices[`${visualisationParam}`]

	const engine = useEngine()

	const slideProps = {
		score: engine.evaluate('bilan').nodeValue,
		headlessMode: true,
	}

	return (
		<div>
			<ScrollToTop />
			<Title data-cypress-id="personas-title" title={<Trans>Personas</Trans>} />
			<p>
				<Trans>
					Cette page vous permet de naviguer les parcours Nos Gestes Climat
					comme si vous √©tiez l'un des profils types que nous avons list√©s.
				</Trans>
			</p>
			<p>
				‚û°Ô∏è{' '}
				<em>
					<Trans>
						S√©lectionnez un persona et √©ventuellement un graphique √† afficher.
					</Trans>
				</em>
			</p>
			<form>
				üßÆ
				{Object.keys(visualisationChoices).map((name) => (
					<label key={name}>
						<input
							onChange={() => setSearchParams({ visualisation: name })}
							type="radio"
							value={name}
							checked={searchParams.get('visualisation') === name}
						/>
						{name}
					</label>
				))}
			</form>
			{persona && (
				<div
					css={`
						max-width: 35rem;
						margin: 0 auto;
						${visualisationParam === 'ravijen' &&
						`
						height: 45rem;
						max-width: none;
						`}
					`}
				>
					<Visualisation {...slideProps} />
				</div>
			)}
			<PersonaGrid warningIfSituationExists={false} />
			<p>
				<Trans i18nKey={'publicodes.Personas.description'}>
					Les personas nous permettront de prendre le parti d'une diversit√©
					d'utilisateurs quand ils voient notamment notre √©cran "passer √†
					l'action".
				</Trans>
			</p>
			<h2>
				<Trans>Comment cr√©er un persona ?</Trans>
			</h2>
			<p>
				<Trans>C'est dans le fichier</Trans>{' '}
				<a href="https://github.com/datagir/nosgestesclimat-site/blob/master/source/sites/publicodes/personas.yaml">
					personas.yaml
				</a>{' '}
				<Trans i18nKey={'publicodes.Personas.tuto'}>
					que √ßa se passe. On peut soit copier coller les donn√©es d'un autre
					persona et les modifier, soit en cr√©er un de z√©ro depuis la
					simulation. Une fois la simulation satisfaisante, cliquer sur
					"Modifier mes r√©ponses" puis taper Ctrl-C, ouvrir la console du
					navigateur (F12), v√©rifiez bien que vous √™tes dans l'onglet "Console",
					allez tout en bas de la console (elle est un peu charg√©e...), puis
					copier le JSON affich√©, le coller dans{' '}
					<a href="https://www.json2yaml.com">cet outil</a> pour g√©n√©rer un
					YAML, puis l'ins√©rer dans personas.yaml.
				</Trans>
			</p>
			<p>
				<Trans i18nKey={'publicodes.Personas.lienGenerateur'}>
					Pour les pr√©noms, on peut utiliser{' '}
					<a href="https://lorraine-hipseau.me">ce g√©n√©rateur</a>
				</Trans>
				.
			</p>
		</div>
	)
}

export const PersonaGrid = ({ warningIfSituationExists }) => {
	const { i18n } = useTranslation()
	const dispatch = useDispatch(),
		objectif = 'bilan'
	const selectedPersona = useSelector((state) => state.simulation?.persona)

	const situation = useSelector(situationSelector)
	const [data, setData] = useState()
	const [warning, setWarning] = useState(false)
	const engine = useEngine()

	const branchData = useBranchData()
	const lang = i18n.language === 'en' ? 'en-us' : i18n.language

	const navigate = useNavigate()
	const [params] = useSearchParams()
	const redirect = params.get('redirect')

	useEffect(() => {
		if (!branchData.loaded) return
		const fileName = `/personas-${lang}.json`

		if (process.env.NODE_ENV === 'development') {
			const json = require('../../../nosgestesclimat/public' + fileName)
			setData(json)
		} else {
			fetch(branchData.deployURL + fileName, {
				mode: 'cors',
			})
				.then((response) => response.json())
				.then((json) => {
					setData(json)
				})
				.catch((err) => {
					console.log('url:', branchData.deployURL + `/personas-${lang}.json`)
					console.log('err:', err)
				})
		}
	}, [branchData.deployURL, branchData.loaded, lang])

	if (!data) return null

	const personasRules = Object.values(data)

	const setPersona = (persona) => {
		engine.setSituation({}) // Engine should be updated on simulation reset but not working here, useEngine to be investigated
		const { nom, ic√¥nes, data, description } = persona
		const missingVariables = engine.evaluate(objectif).missingVariables ?? {}
		const defaultMissingVariables = Object.keys(missingVariables)

		dispatch(
			setDifferentSituation({
				config: { objectifs: [objectif] },
				url: '/simulateur/bilan',
				// the schema of peronas is not fixed yet
				situation: data.situation || data,
				persona: nom,
				// If not specified, act as if all questions were answered : all that is not in
				// the situation object is a validated default value
				foldedSteps: defaultMissingVariables,
			})
		)
		if (redirect) navigate(redirect)
	}
	const hasSituation = Object.keys(situation).length
	if (warning)
		return (
			<IllustratedMessage
				emoji="‚ÑπÔ∏è"
				message={
					<div>
						<p>
							<Trans i18nKey={'publicodes.Personas.warningMsg'}>
								S√©lectionner un persona releguera votre simulation en cours dans
								votre historique de simulations, accessible en bas de votre{' '}
								<Link to="/profil">page profil</Link>.
							</Trans>
						</p>
						<button
							className="ui__ button simple"
							onClick={() => {
								dispatch(resetSimulation())
								setPersona(warning)
								setWarning(false)
							}}
						>
							<Trans>J'ai compris</Trans>
						</button>
						<button
							className="ui__ button simple"
							onClick={() => setWarning(false)}
						>
							<Trans>Annuler</Trans>
						</button>
					</div>
				}
			/>
		)

	return (
		<CardGrid css="padding: 0; justify-content: center">
			{personasRules.map((persona) => {
				const { nom, ic√¥nes, data, description, r√©sum√© } = persona
				return (
					<li key={nom}>
						<button
							className={`ui__ card box interactive light-border ${
								selectedPersona === persona.nom ? 'selected' : ''
							}`}
							css={`
								width: 11rem !important;
								height: 15rem !important;
								padding: 1rem 0.75rem 1rem 0.75rem !important;
								${nom === persona
									? 'border: 2px solid var(--color) !important'
									: ''};
								img {
									margin-bottom: 0.5rem;
								}
							`}
							onClick={() =>
								warningIfSituationExists && hasSituation
									? setWarning(persona)
									: setPersona(persona)
							}
						>
							<div
								css={`
									text-transform: uppercase;
									color: var(--color);
									font-size: 90%;
								`}
							>
								<div>{emoji(ic√¥nes || 'üë•')}</div>
								<div>{nom}</div>
							</div>
							<p>
								<small>{r√©sum√© || description}</small>
							</p>
						</button>
					</li>
				)
			})}
		</CardGrid>
	)
}
